.TH ModbusSlaveStatus 3lightmodbus "28 July 2016" "v1.2"
.SH NAME
.PP
\fBModbusSlaveStatus\fP \- data type containing all information about current slave device status and its configuration.
.SH SYNOPSIS
.PP
\fB\fC
    typedef struct
    {
        uint8_t address; //Slave address
        uint16_t *registers; //Slave holding registers
        uint16_t registerCount; //Slave register count
        uint8_t *coils; //Slave coils
        uint16_t coilCount; //Slave coil count
        uint8_t *discreteInputs; //Slave discrete input
        uint16_t discreteInputCount; //Slave discrete input count
        uint8_t *registerMask; //Masks for write protection
        uint16_t registerMaskLength; //Masks length
        uint16_t *inputRegisters; //Slave input registers
        uint16_t inputRegisterCount; //Slave input count
        uint8_t finished; //Has slave finished building response?
        ModbusFrame response; //Slave response formatting status
        ModbusFrame request; //Request frame from master
    } ModbusSlaveStatus; //Slave device configuration data
\fR
.SH DESCRIPTION
.PP
The \fBModbusSlaveStatus\fP contains information about slave device configuration and status. To make sure, that structure is set up for use properly,
remember to call \fBmodbusSlaveInit\fP\&. Values like \fIregisters\fP, \fIregisterCount\fP, etc. are ought to be set beforehand though.
.TS
allbox;
cb cb
l l
l l
l l
l l
l l
l l
l l
l l
l l
l l
l l
l l
.
member name	description
\fB\fCaddress\fR	slave device address
\fB\fCregisters\fR	holding registers array
\fB\fCregisterCount\fR	length of holding registers array
\fB\fCcoils\fR	coils array
\fB\fCcoilCount\fR	number of coils
\fB\fCdiscreteInputs\fR	discrete inputs array
\fB\fCdiscreteInputCount\fR	number of discrete inputs
\fB\fCinputRegisters\fR	input registers array
\fB\fCinputRegisterCount\fR	length of input registers array
\fB\fCfinished\fR	has processing finished
\fB\fCresponse\fR	response frame for master device
\fB\fCrequest\fR	request frame from master
.TE
.SH NOTES
.PP
\fBModbusSlaveStatus\fP is declared in \fBlightmodbus/slave/stypes.h\fP, although including \fBlightmodbus/slave.h\fP is enough.
In \fIcoils\fP and \fIdiscreteInputs\fP each bit matches one input/output, and
\fIdiscreteInputCount\fP and \fIcoilCount\fP correspond to actual input/output count, not the array length!
When some request\-parsing function is called, make sure that valid frame pointer is set inside \fIrequest\fP\&.
After setting structure up manually, \fBmodbusSlaveInit\fP should be called.
.PP
Holding registers can be write\-protected. To achieve that, accordingly set \fBbits\fP to 1 in \fIregisterMask\fP array (of \fIregisterMaskLength\fP).
For example, setting 17th bit to 1, will result in 17th register being read\-only.
To write and read masks more easily see 
.BR modbusMaskRead (3lightmodbus) 
and 
.BR modbusMaskWrite (3lightmodbus).
.PP
Important thing is, \fIrequest\fP is not an array, just a pointer. \fBIt does not point to allocated memory by default!\fP
Please, simply put address of your data there, and do not attempt copying it.
.SH SEE ALSO
.PP
.BR ModbusFrame (3lightmodbus), 
.BR modbusSlaveInit (3lightmodbus), 
.BR modbusSlaveEnd (3lightmodbus)
.SH AUTHORS
.PP
Jacek Wieczorek (Jacajack) \- \[la]mrjjot@gmail.com\[ra]

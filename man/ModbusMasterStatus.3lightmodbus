.TH ModbusMasterStatus 3lightmodbus "28 July 2016" "v1.2"
.SH NAME
.PP
\fBModbusMasterStatus\fP \- data type containing all information about current master device status and its configuration.
.SH SYNOPSIS
.PP
\fB\fC
    typedef struct
    {
        ModbusData *data; //Data read from slave
        uint8_t dataLength; //Count of data read from slave
        uint8_t finished; //Is parsing finished?
        ModbusException exception; //Optional exception read
        ModbusFrame request; //Formatted request for slave
    } ModbusMasterStatus; //Master device configuration
\fR
.SH DESCRIPTION
.PP
The \fBModbusMasterStatus\fP contains information about master device configuration and status. To make sure, that structure is set up for use properly,
remember to call \fBmodbusMasterInit\fP\&.
.TS
allbox;
cb cb
l l
l l
l l
l l
l l
.
member name	description
\fB\fCdata\fR	data from slave device
\fB\fCdataLength\fR	length of \fIdata\fP array
\fB\fCfinished\fR	has processing finished?
\fB\fCexception\fR	information about exception returned by slave
\fB\fCrequest\fR	request frame
.TE
.PP
\fB\fCdata\fR points to dynamically allocated array of type \fBModbusData\fP, and length of \fB\fCdataLength\fR containing data read from salve device.
\fB\fCfinished\fR is set to non\-zero value, when parsing frame is finished, and results are available.
\fB\fCexception\fR contains exception information, if any.
\fB\fCrequest\fR contains request frame, ought to be send to slave device.
.SH NOTES
.PP
\fBModbusMasterStatus\fP is declared in \fBlightmodbus/master/mtypes.h\fP, although including \fBlightmodbus/master.h\fP is enough.
.SH SEE ALSO
.PP
ModbusFrame( 3lightmodbus ), ModbusException( 3lightmodbus ), ModbusData( 3lightmodbus ), modbusMasterInit( 3lightmodbus ), modbusMasterEnd( 3lightmodbus )
